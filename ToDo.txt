1/21/2024
Initialy thought that PP wouldnt really be a factor to consider but was proved wrong today.
Will need to implement tracking of PP.
The issue is that the data that is sent only includes the pp of the active pokemon.

1/23/2024
Tried adding a PP tracker to the game state that tracks the PP of the active pokemon.
Played a few games and this semmed good for now,  but will do more testing to see if this is enough or if tracking is necessary for all pokemon.

1/17/2024
Altered the way being forced to switch is stored. It is now stored as a part of the gameState. This lets me stop passing it on as a parameter to alpha beta.
Fixed a bug where the moves pp was not being reported becasue the name of the move was stored in the PP tracker but not the id. ie (Leaf Storm instead of leafstorm)
It also allows the forceSwitch to be set in the simulation.
A current behaviour of the AI that is odd is that it will sometimes use a healing move at full HP on the worse case assumption that it will be damaged.

2/10/2024
Added tracking of enemy stat boosts.

2/10/2024
Adjust damage calcualtions to use worse case result. When an array of damage numbers is returned the AI will assume worse case now as opposed to using the median result.
When an enemy move is calculated it will use the higheest value and when the AI move is calculated it will use the lowest value.

2/10/2024
Added some JSDoc comments

2/10/2024
Added JSDoc parameter descriptions

2/14/2024
Added more JSDoc for almost everything
Might need to change the battlemangager to include the current data as the gameState instaed of keeping a seperate current gameState.

2/14/2024
Tried including all information in the current gameState. Removed redundant functions.

2/17/2024
Moved simulation of moves to the gameState class and included move priority and enemy switching in simulation. 
If the Ai's move has higher priority it goes first else the enemy goes first.

2/17/2024
Fixed bug where move was not being selected when only one option was available

2/18/2024
Moved pp tracking to the myPokemon class. Also updated node.js to version 18. This caused a bug that was fixed by adding an extra line in main.js found https://github.com/node-fetch/node-fetch/issues/1624.
Updating to the never version was to use structuredClone() because I thought it would clone methods. It does not clone methods :( .
Next need to seperate the classes into different files and start tracking stat boosts for the AI.

2/20/2024
Added tracking of AI stat boosts. Added JSDOC for the new methods.
Discovered odd bug where pp is: pp: [ 16, 15, 13, 31, '-1': 24 ] for some reason.

2/24/2024
Moved gameState, myPokemon and enemyPokemon classes to separate files.
Added simulation of stat boosts from moves to the simulation.

2/25/2024
Commented out some debugging console statements.
Resets bot state after a battle is over.

2/28/2024
Added force switching for enemy to simulation such that when the enemy Pokemon is dead the next turn is spent switching to a new Pokemon.

2/28/2024
Tried using an altered version of alpha-beta where simulate returns a set of possible states based on the possible enemy moves and the alpha beta works recusivley on those stats.
Had to use worker threads as this took far too much time.
However didnt work well and was far more time consuming so probably wont continue it.

3/2/2024
Upon furhter thinking decided to continue this and fixed the ALpha beta algorithim to use worker threads.
Alpha - Beta algorithim makes the "Paranoid Assumption" that the enemy player knows the move you will choose on any given turn.

3/3/2024
Added JSDoc comments

3/3/2024
Added config file for JSDoc
Command to use is: jsdoc -c "path\to\config.json" -d docs

3/4/2024
Added a transposition table.
Uses object-hash. Still need to implement it in Alpha Beta

3/4/2024
Tried updating the table to account for collisions

3/5/2024
Changed it to use Map.

3/6/2024
Implemented to transposition table into Alpha - Beta.
Based on psuedocode in https://webdocs.cs.ualberta.ca/~tony/OldPapers/icca.Mar1986.pp3-18.pdf
Added code for tracking the time taken for moves and storing them in a file. Can be used to tracking the improvement gained from a transposition table.

3/6/2024
Moved time files to their own directory and ran some tests.

3/11/2024
Ran more test, still need to do more.